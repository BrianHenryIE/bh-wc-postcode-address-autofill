<?php
/**
 * Data for countries should be loaded from file and stored in wp_options.
 *
 * Country codes are conventionally uppercase except when used in filenames.
 *
 * @package brianhenryie/bh-wc-postcode-address-autofill
 */

namespace BrianHenryIE\WC_Postcode_Address_Autofill\API;

use BrianHenryIE\WC_Postcode_Address_Autofill\Settings_Interface;
use Throwable;

/**
 * Reads .json from plugin WP_PLUGIN_DIR filepath /data and returns `Country_Data` object.
 */
class Data_Loader {

	/**
	 * Used for the plugin basename which is used to determine the plugin folder.
	 */
	protected Settings_Interface $settings;

	/**
	 * Constructor.
	 *
	 * @param Settings_Interface $settings The plugin settings.
	 */
	public function __construct( Settings_Interface $settings ) {
		$this->settings = $settings;
	}

	/**
	 * Get the filesystem path to the data directory, optionally appending filename.
	 *
	 * @param string $appending Optional path to append to data directory.
	 *
	 * @return string
	 */
	protected function get_data_dir( string $appending = '' ): string {
		return WP_PLUGIN_DIR . '/' . plugin_dir_path( $this->settings->get_plugin_basename() ) . 'data/' . $appending;
	}

	/**
	 * Determine is a postcode lookup list available for a specific country.
	 *
	 * Checks the `available-countries.php` file which is autogenerated by `data-parser.php` build tool and
	 * returns an array of countries which `.json` datasets are available in the `/data/` directory.
	 *
	 * @param string $country Two -character country code (ISO 3166-1 alpha-2).
	 */
	protected function is_implemented_county( string $country ): bool {
		$filename = $this->get_data_dir( 'available-countries.php' );
		if ( ! is_readable( $filename ) ) {
			return false;
		}
		$available_countries = include $filename;
		if ( ! is_array( $available_countries ) ) {
			return false;
		}
		return in_array( strtoupper( $country ), $available_countries, true );
	}

	/**
	 * Load the data for a requested country from memcache/db/disk.
	 *
	 * We cache to save the time loading from disk and parsing from JSON to an object.
	 *
	 * @param string $country Two-character country code (ISO 3166-1 alpha-2).
	 *
	 * @return ?Country_Data
	 */
	public function get_data_for_country( string $country ): ?Country_Data {

		if ( ! $this->is_implemented_county( $country ) ) {
			return null;
		}

		// TODO: Cache.

		$file_path = $this->get_data_dir( strtolower( $country ) . '.json' );
		if ( ! is_readable( $file_path ) ) {
			// "Country_Data for $country not readable at expected $filename"
			return null;
		}

		try {
			ob_start();
			include $file_path;
			$file_data = ob_get_clean();
			if ( empty( $file_data ) ) {
				return null;
			}
			$json_country_data = json_decode( $file_data, false, 512, JSON_THROW_ON_ERROR );
		} catch ( Throwable $t ) {
			// TODO: If cache is unparseable, delete it.
			return null;
		}

		return new Country_Data( $json_country_data );
	}
}
